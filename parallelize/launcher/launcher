#!/bin/bash
#------------------------------------------------
# Simple serial job launcher for TACC systems 
#
# 9/9/2006 - l.wilson
# 1/21/2011 - l.wilson - Modified to spawn only
#                        1 ssh/host
# 7/11/2012 - l.wilson - Added scheduling options
# 11/30/2012 - l.wilson - Added Xeon Phi support
#
# Texas Advanced Computing Center
# The University of Texas at Austin
#------------------------------------------------

if [ "x$LAUNCHER_JOB_FILE" == "x" ]
then
  if [ "$LAUNCHER_ON_PHI" == "1" ];then
    cd $5
    export LAUNCHER_JOB_FILE="$6"
  else
    cd $2
    export LAUNCHER_JOB_FILE="$3"
  fi
fi

if [ "x$LAUNCHER_JNOBS" == "x" ]
then
  export LAUNCHER_NJOBS=`cat $LAUNCHER_JOB_FILE | wc -l`
fi

if [ "$LAUNCHER_ON_PHI" == "1" ];then
  LAUNCHER_DYN_SRV="$LAUNCHER_PHI_DYN_COUNT $LAUNCHER_PHI_DYN_COUNT_PORT"
else
  LAUNCHER_DYN_SRV="$LAUNCHER_DYN_COUNT $LAUNCHER_DYN_COUNT_PORT"
fi

#if [ "$LAUNCHER_TSK_ID" == "0" ];then

#  if [ "$LAUNCHER_ON_PHI" == "1" ];then
#    echo "--------------------------------------------------"
#    echo "Launcher (on Intel Xeon Phi) -> $LAUNCHER_NPROCS processors allocated."
#    echo "Launcher (on Intel Xeon Phi) -> $LAUNCHER_NJOBS total tasks to complete."
#    echo "--------------------------------------------------"
#    echo " "
#  else
#    echo "--------------------------------------------------"
#    echo "Launcher -> $LAUNCHER_NPROCS processors allocated."
#    echo "Launcher -> $LAUNCHER_NJOBS total tasks to complete."
#    echo "--------------------------------------------------"
#    echo " "
#  fi
#else
#    sleep 0.5
#fi

#---------------------------------
# Setup initial JID for each task
#---------------------------------
if [ $LAUNCHER_SCHED == "interleaved" ]; then
  # Setup stride for assigning serial tasks
  export LAUNCHER_JID=`expr $LAUNCHER_TSK_ID + 1`
elif [ $LAUNCHER_SCHED == "block" ]; then
  blocks=`expr $LAUNCHER_NJOBS / $LAUNCHER_NPROCS`
  if [ `expr $blocks \* $LAUNCHER_NPROCS` -lt $LAUNCHER_NJOBS ]; then
    blocks=`expr $blocks + 1`
  fi
  export LAUNCHER_JID=`expr $LAUNCHER_TSK_ID \* $blocks + 1`
  nextblock=`expr \( $LAUNCHER_TSK_ID + 1 \) \* $blocks + 1`
else
  # Grab the JID to run from The Count
  #export LAUNCHER_JID=`nc -d $LAUNCHER_DYN_SRV`
  export LAUNCHER_JID=`nc $LAUNCHER_DYN_SRV`
fi 

COMPLETE="false"

while [ $COMPLETE == "false" ]; do
  if [ ! "x$LAUNCHER_JID" == "x" ]
  then
    export CMD=`grep -m $LAUNCHER_JID . $LAUNCHER_JOB_FILE | tail -n 1`

    START_TIME=`date +"%s"`
    echo "Launcher: Task $LAUNCHER_TSK_ID running job $LAUNCHER_JID on `hostname` ($CMD)"
    eval $CMD
    END_TIME=`date +"%s"`
    EXEC_TIME=`expr $END_TIME - $START_TIME`
    echo "Launcher: Job $LAUNCHER_JID completed in $EXEC_TIME seconds."
  fi

  if [ $LAUNCHER_SCHED == "interleaved" ]; then
    export LAUNCHER_JID=`expr $LAUNCHER_JID + $LAUNCHER_NPROCS`
    if [ "x$LAUNCHER_JID" == "x" -o $LAUNCHER_JID -gt $LAUNCHER_NJOBS ]; then
      COMPLETE="true"
    fi
  elif [ $LAUNCHER_SCHED == "block" ]; then
    export LAUNCHER_JID=`expr $LAUNCHER_JID + 1`
    if [ $LAUNCHER_JID -ge $nextblock ]; then
      COMPLETE="true"
    fi
  else
    RETRY=0
    while [ $RETRY -lt 3 ]
    do
      #export LAUNCHER_JID=`nc -d $LAUNCHER_DYN_SRV`
      export LAUNCHER_JID=`nc $LAUNCHER_DYN_SRV`
      if [ "x$LAUNCHER_JID" == "x" ]
      then
        if [ $RETRY -lt 3 ]
        then
          echo "WARNING: No response from dynamic task server. Retrying..."
          RETRY=`expr $RETRY + 1`
        else
          echo "ERROR: No response from dynamic task server after 3 retries. Exiting."
          exit
        fi
      elif [ "$LAUNCHER_JID" == "Done" ]
      then
        RETRY=4
        COMPLETE="true"
      else
        RETRY=4
      fi
    done
  fi

done

echo "Launcher: Task $LAUNCHER_TSK_ID done. Exiting."
